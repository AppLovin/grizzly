<!-- boolean -->
<!ENTITY % boolean "(yes | no | on | off | 1 | 0 | true | false)">

<!-- network-config
    contains complete Grizzly configuration.

    elements
        property
            declares public Grizzly configuration properties
        transports
            describes low level transports configuration.  Like tcp, udp, ssl
            transports configuration
        protocols
            describes higher level protocols like: http, https, iiop
        network-listeners
            binds protocols with lower level transports
-->
<!ELEMENT network-config (property*, transports, protocols, network-listeners)>

<!ELEMENT description (#PCDATA)>

<!-- property
    defines some implementation specific properties.  they could be different
    from implementation to implementation, so it's not possible to define them
    neither like element nor attribute

    attributes
        name
            property name
        value
            property value
-->
<!ELEMENT property (description?)>

<!ATTLIST property
    name CDATA #REQUIRED
    value CDATA #REQUIRED>

<!-- Transports

    elements
        property
            declares network-config public properties
        selection-key-handler
            defines public SelectionKey handler, which could be referenced within transport
        transport
            defines one specific transport.
-->
<!ELEMENT transports (property*, selection-key-handler*, transport*)>

<!-- selection-key-handler
    defines transport's SelectionKey handling logic

    element
        property
            declares selection-key-handler specific properties

    attributes
        name
            SelectionKey handler name, which could be used as reference
        classname
            SelectionKey handler implementation class
-->
<!ELEMENT selection-key-handler (property*)>
<!ATTLIST selection-key-handler
    name CDATA #IMPLIED
    classname CDATA #IMPLIED
  >

<!-- transport
    defines one specific transport and its properties

    attributes
        acceptor-threads
            the number of acceptor threads listening for the transport's events
        byte-buffer-type
            type of ByteBuffer, which will be used with transport. Possible values are: HEAP and DIRECT
        classname
            name of class, which implements transport logic
        display-configuration
            flush Grizzly's internal configuration to the server logs (like number of threads created,
            how many polled objects, etc.)
        enable-snoop
            dump the requests/response information in server.log. Useful for debugging purpose,
            but significantly reduce performance as the request/response bytes are translated to String.
        idle-key-timeout
            timeout, after which idle key will be cancelled and channel closed
        name
            transport's name, which could be used as reference
        max-connections-count
            the max number of connections the transport should handle at the same time
        read-timeout
            read operation timeout
        selection-key-handler
            use public SelectionKey handler, which was defined earlier in the document.
        selector-poll-timeout
            The time, in milliseconds, a NIO Selector will block waiting for events (users requests).
        write-timeout
            write operation timeout
-->
<!ELEMENT transport (property*)>
<!ATTLIST transport
    acceptor-threads CDATA "1"
    byte-buffer-type (HEAP|DIRECT) "HEAP"
    classname CDATA #IMPLIED
    display-configuration %boolean; "false"
    enable-snoop %boolean; "false"
    idle-key-timeout CDATA #IMPLIED
    max-connections-count CDATA "4096"
    name CDATA #REQUIRED
    read-timeout CDATA #IMPLIED
    selection-key-handler CDATA #IMPLIED
    selector-poll-timeout CDATA #IMPLIED
    write-timeout CDATA #IMPLIED
>

<!-- protocols
    contains the description of higher level protocols like: http, https, iiop, etc.

    elements
        property
            declares properties, associated with the protocols element
        protocol
            defines one specific protocol
-->
<!ELEMENT protocols (property*, protocol*)>

<!-- protocol
    defines one single high-level protocol like: http, https, iiop, etc.

    elements
        property
            declares properties, associated with the protocol
        http
            defines any http settings for this protocol
        ssl
            protocol security (ssl) configuration.
        port-unification
            defines port-unification logic, if it is required to handle more than
            one high level protocol on a single network-listener.
        protocol-chain-instance-handler
            protocol chain instance handler logic.

    attributes
        name
            protocol name, which could be used as reference
        security-enabled
            true means the protocol is secured and ssl element will be used to
            initialize security settings. False means that protocol is not secured
            and ssl element, if present, will be ignored.
-->
<!ELEMENT protocol (property*, http?, ssl?, port-unification?,
    protocol-chain-instance-handler?)>
    
<!ATTLIST protocol
    name CDATA #REQUIRED
    security-enabled %boolean; "false"
>

<!-- protocol-chain-instance-handler
    defines protocol chain instantiation and releasing logic

    elements
        property
            set of protocol chain instance handler properties
        protocol-chain
            defines protocol chain configuration

    attributes
        classname
            Protocol chain instance handler implementation class
        name
            protocol chain instance handler name, which could be used as reference
-->
<!ELEMENT protocol-chain-instance-handler (property*, protocol-chain)>
<!ATTLIST protocol-chain-instance-handler
    classname CDATA #IMPLIED
    name CDATA #IMPLIED
>

<!-- protocol-chain
    defines the type of protocol chain and describes protocol filters,
    which will participate in request processing

    elements
        property
            set of protocol chain properties
        protocol-filter
            defines protocol filter sequence, which will process a request.

    attributes
       classname
           Protocol chain instance handler implementation class
        name
            protocol chain name, which could be used as reference
        type
            protocol chain type. Could be STATEFUL or STATELESS
-->
<!ELEMENT protocol-chain (property*, protocol-filter*)>
<!ATTLIST protocol-chain
    classname CDATA #IMPLIED
    name CDATA #IMPLIED
    type (STATELESS|STATEFUL) "STATELESS"
  >

<!-- protocol-filter
    defines single protocol filter in a sequence

    attributes
        classname
            protocol filter implementation class
        name
            protocol filter name, which could be used as reference
-->
<!ELEMENT protocol-filter (property*)>
<!ATTLIST protocol-filter
    classname CDATA #REQUIRED
    name CDATA #IMPLIED
  >

<!-- port-unification
    defines logic of hosting several protocol on a single tcp port.

    elements
        property
            set of port-unification properties
        protocol-finder
            set of protocol finders, which will be responsible for protocol recognition

    attributes
        classname
            port unification logic implementation class
        name
            port-unification name, which could be used as reference
-->

<!ELEMENT port-unification (property*, protocol-finder*)>
<!ATTLIST port-unification
    classname CDATA #IMPLIED
    name CDATA #IMPLIED
>


<!-- protocol-finder
    describes a protocol finder/recognizer, which is able to recognize whether incoming request
    belongs to the specific protocol or not. If yes - protocol-finder forwards request processing to a
    specific protocol.

     attributes
        classname
            finder logic implementation class
        name
            finder name, which could be used as reference
        protocol
            reference to a protocol, which was defined before.
-->
<!ELEMENT protocol-finder (property*)>
<!ATTLIST protocol-finder
    classname CDATA #IMPLIED
    name CDATA #IMPLIED
    protocol CDATA #IMPLIED
>

<!-- http

  attributes
    default-response-type
        Setting the default response-type. Specified as a semi-colon
        delimited string consisting of content-type, encoding,
        language, charset
    default-virtual-server
        The id attribute of the default virtual server for this
        particular connection group.
    enable-comet-support
        Enable comet support for this http instance
    forced-response-type
        The response type to be forced if the content served cannot
        be matched by any of the MIME mappings for extensions.
        Specified as a semi-colon delimited string consisting of
        content-type, encoding, language, charset
    header-buffer-length-in-bytes
        The size of the buffer used by the request processing threads
        for reading the request data
    max-connections
        Max no of connection in the Keep Alive mode
    redirect-port
        if the connector is supporting non-SSL requests and a request
        is received for which a matching security-constraint requires
        SSL transport catalina will automatically redirect the
        request to the port number specified here
    request-body-buffer-size
        size of the buffer for request bodies
    request-timeout
        Time after which the request times out
    send-buffer-size
        size of the buffer for responses
    server-name
        Tells the server what to put in the host name section of any
        URLs it sends to the client. This affects URLs the server
        automatically generates; it doesnt affect the URLs for
        directories and files stored in the server. This name should
        be the alias name if your server uses an alias. If you append
        a colon and port number, that port will be used in URLs the
        server sends to the client.
    timeout
        Keep Alive timeout , max time a connection can be deemed as
        idle and kept in the keep-alive state
    version
        The version of the HTTP protocol used by the HTTP Service
    xpowered-by
        The Servlet 2.4 spec defines a special X-Powered-By:
        Servlet/2.4 header, which containers may add to
        servlet-generated responses. This is complemented by the JSP
        2.0 spec, which defines a X-Powered-By: JSP/2.0 header to be
        added (on an optional basis) to responses utilizing JSP
        technology. The goal of these headers is to aid in gathering
        statistical data about the use of Servlet and JSP technology.
        If true, these headers will be added.

-->
<!ELEMENT http (property*, file-cache?)>

<!ATTLIST http
    default-response-type CDATA "text/html; charset=iso-8859-1"
    default-virtual-server CDATA #IMPLIED
    enable-comet-support %boolean; "false"
    forced-response-type CDATA "text/html; charset=iso-8859-1"
    header-buffer-length CDATA "4096"
    max-connections CDATA "256"
    redirect-port CDATA #IMPLIED
    request-body-buffer-size CDATA "4096"
    request-timeout CDATA "30"
    send-buffer-size CDATA "8192"
    server-name CDATA #IMPLIED
    timeout CDATA "30"
    version CDATA "HTTP/1.1"
    xpowered-by %boolean; "true"
>

<!-- file-cache

    attributes
        enabled
            Enables the caching of file content
        max-files-count
            Maximum no. of files in the file cache.
        max-age
            How old files can get before aging out of cache
        max-cache-size
            Maximum cache size on the disk
-->
<!ELEMENT file-cache EMPTY>

<!ATTLIST file-cache
    enabled %boolean; "true"
    max-files-count CDATA "1024"
    max-age CDATA "30"
    max-cache-size CDATA "10485760"
>

<!-- ssl
    Define SSL processing parameters

    attributes
        name
            name of this SSL configuration
        cert-nickname
            nickname of the server certificate in the certificate
            database or the PKCS#11 token. In the certificate, the name
            format is tokenname:nickname. Including the tokenname: part
            of the name in this attribute is optional.
        client-auth-enabled
            Determines whether SSL3 client authentication is performed on
            every request, independent of ACL-based access control.
        key-store
            location of the keystore file
        ssl2-ciphers
            A comma-separated list of the SSL2 ciphers used, with the
            prefix + to enable or - to disable, for example +rc4. Allowed
            values are rc4, rc4export, rc2, rc2export, idea, des,
            desede3. If no value is specified, all supported ciphers are
            assumed to be enabled. NOT Used in PE
        ssl2-enabled
            Determines whether SSL2 is enabled. NOT Used in PE. SSL2 is
            not supported by either iiop or web-services. When this
            element is used as a child of the iiop-listener element then
            the only allowed value for this attribute is "false".
        ssl3-enabled
            Determines whether SSL3 is enabled.
            If both SSL2 and SSL3 are enabled for a virtual server, the server
            tries SSL3 encryption first. If that fails, the server tries SSL2
            encryption.
        ssl3-tls-ciphers
            A comma-separated list of the SSL3 ciphers used, with the
            prefix + to enable or - to disable, for example
            +SSL_RSA_WITH_RC4_128_MD5. Allowed SSL3/TLS values are those
            that are supported by the JVM for the given security provider
            and security service configuration. If no value is specified,
            all supported ciphers are assumed to be enabled.
        tls-enabled
            Determines whether TLS is enabled.
        tls-rollback-enabled
            Determines whether TLS rollback is enabled. TLS rollback
            should be enabled for Microsoft Internet Explorer 5.0 and
            5.5. NOT Used in PE
        trust-store
            location of the truststore file
-->
<!ELEMENT ssl (property*)>

<!ATTLIST ssl
    name CDATA #IMPLIED
    cert-nickname CDATA #REQUIRED
    client-auth-enabled %boolean; "false"
    key-store CDATA #IMPLIED
    ssl2-ciphers CDATA #IMPLIED
    ssl2-enabled %boolean; "false"
    ssl3-enabled %boolean; "true"
    ssl3-tls-ciphers CDATA #IMPLIED
    tls-enabled %boolean; "true"
    tls-rollback-enabled %boolean; "true"
    trust-store CDATA #IMPLIED
  >

<!-- network-listeners
    contains set of network-listener, which bind protocol to a specific endpoint to listen on

    elements
        property
            set of properties, common for all network-listeners
        thread-pool
            defines public thread-pool(s), which could be referenced within network-listener element(s)
        network-listener
            declares one single network-listener
-->
<!ELEMENT network-listeners (property*, thread-pool*, network-listener*)>

<!-- network-listener
    binds protocol to a specific endpoint to listen on

    attributes
        address
            IP address to listen on
        enabled
            if false, a configured listener, is disabled
        name
            network-listener name, which could be used as reference
        port
            port to listen on
        protocol
            reference to a protocol
        thread-pool
            reference to a thread-pool, defined earlier in the document.
        transport
            reference to a low-level transport
-->
<!ELEMENT network-listener (property*)>
<!ATTLIST network-listener
    address CDATA #IMPLIED
    enabled %boolean; "true"
    name CDATA #REQUIRED
    port CDATA #IMPLIED
    protocol CDATA #REQUIRED
    thread-pool CDATA #IMPLIED
    transport CDATA #REQUIRED
>

<!ELEMENT thread-pools (thread-pool+)>

<!-- thread-pool

    attributes
        classname
            the classname of a thread pool implementation
        idle-thread-timeout
            idle threads are removed from pool, after this time
        max-queue-size
            The maxim number of tasks, which could be queued on the thread pool
        max-thread-pool-size
            Maximum number of threads in the threadpool servicing
            requests in this queue. This is the upper bound on the no. of
            threads that exist in the threadpool.
        min-thread-pool-size
            Minimum number of threads in the threadpool servicing
            requests in this queue. These are created up front when this
            threadpool is instantiated
        thread-pool-id
            This is an id for the work-queue e.g. "thread-pool-1", "thread-pool-2" etc
-->
<!ELEMENT thread-pool (property*)>

<!ATTLIST thread-pool
    classname CDATA #IMPLIED
    idle-thread-timeout CDATA "120"
    max-queue-size CDATA "-1"
    max-thread-pool-size CDATA "200"
    min-thread-pool-size CDATA "0"
    thread-pool-id CDATA #REQUIRED
>