<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->
<chapter version="5.0" xml:id="jaxws" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
  <title>JAX-WS Web Services</title>

  <section xml:id="jaxws-overview">
    <title>Overview</title>

    <para>Starting with version 2.1.2, Grizzly supports <link xlink:href="http://jax-ws.java.net/"
        >JAX-WS</link> web services execution via <link linkend="http-server-framework">HTTP server framework</link>. Using this feature it is
      possible to run JAX-WS web services without need to run them inside web-/app-server, but at
      the same time use all the Grizzly features in order to optimize web service execution.</para>
  </section>

  <section xml:id="jaxws-workings">
    <title>How it works</title>

    <para>The JAX-WS web services support is represented by the JaxwsHandler, which extends <link 
        linkend="hsf-building-simple-components">HttpHandler</link> functionality, so each time JaxwsHandler is getting called, it passes
      control to JAX-WS core, which in its turn calls correspondent web service.</para>
    <para>A JaxwsHandler could be associated with only one web service, which could be passed to
      JaxwsHandler constructor.two ways:<itemizedlist>
        <listitem>
          <para>Web service instance, so default configuration will be used;</para>
        </listitem>
        <listitem>
          <para>WSEndpont, which may contain customized web services configuration, like binding,
            WSDL location etc...</para>
        </listitem>
      </itemizedlist></para>
    <para>A JaxwsHandler is able to process not just web service's operation calls, but also meta
      data requests like requests for web service's WSDL and XSD. So if you register JaxwsHandler to
      serve web service on <emphasis role="italic">http://localhost:8080/addservice</emphasis>, the
      WSDL of the service would be published at <emphasis role="italic"
        >http://localhost:8080/addservice?WSDL</emphasis>.</para>
  </section>

  <section xml:id="jaxws-config">
    <title>JaxwsHandler Configuration</title>

    <table>
      <title>JaxwsHandler constructor parameters</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry>implementor</entry>

            <entry>The web service instance. When using programmatic approach, it might be just an
              instance of class, annotated as @WebService. By using "implementor" approach, when
              constructing JaxwsHandler, we're actually asking JAX-WS core to configure web service
              basing on implementor's class name and annotations.</entry>
          </row>

          <row>
            <entry>endpoint</entry>

            <entry>The web services, represented by WSEndpoint. Unlike "implementor" approach, when
              using endpoint, we can customize web service more finely. It's also possible to use
              external config files in this case.</entry>
          </row>

          <row>
            <entry>isAsync</entry>

            <entry>If true, the JaxwsHandler will execute WebService in asynchronous mode, otherwise
              synchronous.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section xml:id="jaxws-samples">
    <title>Sample</title>

    <para>It's very easy to publish web service, using Grizzly. Assume we have "add" web service
      declared following way:</para>
    <programlisting language="java">import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;

@WebService
public class AddService {
    @WebMethod
    public int add(@WebParam(name="value1") int value1, @WebParam(name="value2") int value2) {
        return value1 + value2;
    }
}</programlisting>
    <para>In order to make this web service available on URL: <emphasis role="italic"
        >http://localhost:8080/add</emphasis>, we do this:</para>
    <programlisting language="java">HttpServer httpServer = new HttpServer();
NetworkListener networkListener = new NetworkListener("jaxws-listener", "0.0.0.0", PORT);
        
HttpHandler httpHandler = new JaxwsHandler(new AddService());
httpServer.getServerConfiguration().addHttpHandler(httpHandler, "/add");
httpServer.addListener(networkListener);

httpServer.start();</programlisting>

    <para>It's easy to test this, just type <emphasis role="italic"
        >http://localhost:8080/add?WSDL</emphasis> in your browser to check the web service's
      WSDL.</para>
  </section>
</chapter>
