<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2013 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->
<chapter version="5.0" xml:id="spdy" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
  <title>SPDY</title>

  <section xml:id="spdy-overview">
    <title>Overview</title>

    <para>Starting with 2.3, Grizzly offers support for SPDY/3.  The goal of SPDY is to reduce web
      page load time. This is achieved by prioritizing and multiplexing the transfer of web page
      resources so that only one connection per client is required.  </para>
    <para>Currently, Grizzly implements only SPDY/3 support per <link
        xlink:href="http://tools.ietf.org/html/draft-mbelshe-httpbis-spdy-00"
        >http://tools.ietf.org/html/draft-mbelshe-httpbis-spdy-00</link> with a few caveats.</para>
    <itemizedlist>
        <listitem>
          <para>As Grizzly is primarily providing SPDY support for typical HTTP/1.1 use cases, the
            implementation ignores header frames that are sent out-of-band of the typical
            request/response cycle.</para>
        </listitem>
        <listitem>
          <para>Expect/100-Continue is not currently supported.  This is a weak area of the
            specification.  There has been some discussion on this topic with the protocol
            specification authors, but no resolution has been published.</para>
        </listitem>
        <listitem>
          <para>No support of Credential frames.   Give this, we recommend that the user-agent, if
            possible, not share SPDY sessions between multiple origins.  Additionally, if mutual
            certificate authentication is required, we recommend that the Grizzly SSL configuration
            set client-auth to need. </para>
        </listitem>
        <listitem>
          <para>As SPDY requires the Next Protocol Negotiation (NPN) TLS extension, Grizzly's spdy
            implementation will only operate with OpenJDK 7u14.  Later versions of the OpenJDK
            should work, but there may be some gotchas that would require us to release new versions
            of the Grizzly NPN implementation.</para>
        </listitem>
      </itemizedlist>
  </section>

  <section xml:id="spdy-workings">
    <title>How it works</title>

    <para>The SPDY protocol implementation is mainly represented by two Filters: SpdyFramingFilter,
      SpdyHandlerFilter. The SpdyFramingFilter is responsible for constructing/deconstructing SPDY
      frame messages and SpdyHandlerFilter contains the actual processing logic, which works as a
      codec between SPDY and HTTP messages. All the Filters upstream to SpdyHandlerFilter receive
      HTTP messages for processing, so they are not even aware of SPDY protocol.</para>

    <para>In order to simplify HttpServer SPDY configuration, there is a SpdyAddOn available, which
      may be registered on the required HttpServer's NetworkListener like:</para>

    <programlisting language="java">HttpServer httpServer = new HttpServer();
NetworkListener listener =
         new NetworkListener("grizzly",
                             NetworkListener.DEFAULT_NETWORK_HOST, 
                             PORT);
listener.setSecure(true);

// Include environmental specific SSL configuration.
listener.setSSLEngineConfig(...);

SpdyAddOn sdpyAddon = new SpdyAddOn(); // optionally configure
listener.registerAddOn(spdyAddon);
        
httpServer.addListener(listener);</programlisting>
  </section>

  <section xml:id="spdy-config">
    <title>SPDY Configuration (Grizzly standalone)</title>
    <para>Here's the high-level overview of getting SPDY working with a standalone Grizzly HTTP application.</para>
    <itemizedlist>
        <listitem>
          <para>Include the grizzly-npn-bootstrap-1.0.jar in the bootclasspath of the Grizzly
            application:  -Xbootclasspath/p:&lt;path-to-jar>.</para>
        </listitem>
        <listitem>
          <para>Register the SpdyAddon with the NetworkListener.</para>
        </listitem>
      </itemizedlist>
    <para>The SpdyAddon currently exposes two properties that primarily control the memory
      characteristics of SPDY on the server side.</para>

    <table>
      <title>SpdyAddOn Properties</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry>maxConcurrentStreams</entry>

            <entry>Configures how many streams may be multiplexed over a single connection.  The
              default is 100.</entry>
          </row>

          <row>
            <entry>initialWindowSizeInBytes</entry>

            <entry>Configures how much memory each stream will consume on the server side.  The
              default is 64KB.</entry>
          </row>
          <row>
            <entry>maxFrameLength</entry>
            <entry>Configures the upper bound on allowable frame sizes.  Frames above this bound
              will be rejected.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section xml:id="spdy-config-gf">
    <title>SPDY Configuration (GlassFish 4)</title>
    <para>There's a little more involved when configuring GlassFish 4 for SPDY support.</para>
      <itemizedlist>
        <listitem>
          <para>Copy the grizzly-npn-osgi-1.0.jar to the GF_HOME/modules directory.</para>
        </listitem>
        <listitem>
          <para>Copy the grizzly-spdy-@project.version@.jar to the GF_HOME/modules directory.</para>
        </listitem>
        <listitem>
          <para>Update the domain.xml's JVM configuration section to include a reference to the
            grizzly-npn-bootstrap-1.0.jar within -Xbootclasspath
            (-Xbootclasspath/p:&lt;path-to-jar>.  We recommend adding a new transport to the
            domain.xml that sets the io-strategy property on the transport named TCP will need to be set
            to "org.glassfish.grizzly.strategies.SameThreadIOStrategy.</para>
        </listitem>
        <listitem>
          <para>Start the server.</para>
        </listitem>
        <listitem>
          <para>Run the asadmin command enable-spdy.  Here's an example of the command being run
            against the default ssl listener in GlassFish: </para>
          <para><emphasis role="italic">asadmin enable-spdy http-listener-2</emphasis></para>
        </listitem>
      </itemizedlist>
    <para>When running enable-spdy, it is possible to pass SpdyAddon configuration values via
      --max-concurrent-streams, --initial-window-size-bytes, and max-frame-length-in-bytes. These
      properties may also be set after-the-fact using <emphasis role="italic">asadmin
      set</emphasis>.</para>
  </section>
  <section>
    <title>Dependencies</title>
    <para>As stated previously, in order to use SPDY with Grizzly, you will need to use OpenJDK
      7u14.  The following JARs are also required.  See the following table for details:
      </para><table
        frame="all">
        <title>SPDY Dependencies</title>
        <tgroup cols="2">
          
          <thead>
            <row>
              <entry>Dependency</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><link
                  xlink:href="http://search.maven.org/remotecontent?filepath=org/glassfish/grizzly/grizzly-npn-api/1.0/grizzly-npn-api-1.0.jar"
                  >grizzly-npn-api-1.0.jar</link></entry>
              <entry>This JAR exposes the Grizzly-side of the Next Protocol Negotiation API.
                Typically won't be needed by developers unless they wish to expose custom protocols
                via Next Protocol Negotiation. </entry>
            </row>
            <row>
              <entry><link
                  xlink:href="http://search.maven.org/remotecontent?filepath=org/glassfish/grizzly/grizzly-npn-bootstrap/1.0/grizzly-npn-bootstrap-1.0.jar"
                  >grizzly-npn-bootstrap-1.0.jar</link></entry>
              <entry>Includes both the Next Protocol Negotiation API and the SSL implementation
                overrides.  This JAR must be specified on the bootclasspath in order for Next
                Protocol Negotiation to function.</entry>
            </row>
            <row>
              <entry><link
                  xlink:href="http://search.maven.org/remotecontent?filepath=org/glassfish/grizzly/grizzly-npn-osgi/1.0/grizzly-npn-osgi-1.0.jar"
                  >grizzly-npn-osgi-1.0.jar</link></entry>
              <entry>This JAR is an OSGi bundle fragment.  It's used to ensure the Next Protocol
                Negotiation API classes are properly available to an OSGi runtime.  </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    <para>One item to keep in mind is that the SSL part of the NPN implementation is sensitive the
      the OpenJDK version being used.  It won't work with older update releases, and may not work
      with newer.  If testing with a newer OpenJDK release and an issue is found, please log a <link
        xlink:href="http://java.net/jira/browse/GRIZZLY">bug</link>.</para>
  </section>
</chapter>
