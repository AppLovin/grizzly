<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
  <title>Port unification</title>

  <section>
    <title>Overview</title>
    <para>When implementing network application, which provides several network services, such as
      Web server (HTTP, HTTPS), Corba, JMS, we may think about how these services will be
      published.</para>
    <para>The natural way of publishing different types of services - is to make them available on
      separate TCP ports (one TCP port per service). Usually HTTP is published on port 80, HTTPS 81
      etc... There might be no problems with that approach, the service consumer just must remember
      its own TCP port number, but sometimes, due to certain admin restrictions, we're not able to
      make all the required TCP ports available for the external consumers on Internet. What if
      we're limited just by one TCP port accessible for the external (Internet) service consumers?
      In that case we have to have a solution, which let's us share single TCP port among different
      services, and depending on incoming service request, redirect it to the corresponding service.
      And this is what Grizzly port unification is about.</para>
  </section>
  <section>
    <title>How it works</title>
    <para>The port unification in Grizzly is represented by PUFilter. which is a Grizzly 2.0
      FilterChain Filter, this filter plays role of a fork in the FilterChain.</para>
    <para>Each "unified" protocol, should be represented by a object pair:<itemizedlist>
        <listitem>
          <para><emphasis role="bold">ProtocolFinder</emphasis>, which is responsible for parsing
            incoming data and figuring out if the data belongs to the specific protocol;</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">FilterChain</emphasis>, represents specific protocol
            FilterChain.</para>
        </listitem>
      </itemizedlist></para>
    <para>So the final FilterChain will look like:</para>
    <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/portunification/portunification-diagram.svg"></imagedata>
      </imageobject>
    </inlinemediaobject></para>
    <para>For better usability, Grizzly port unification introduces the PUProtocol abstraction,
      which holds ProtocolFinder + FilterChain pair.</para>
    <para>The picture above is not complete, one piece is missed. We can imagine how new data comes
      from network, comes into main FilterChain, it redirects it to the corresponding protocol
      FilterChain.</para>
    <para>But what about opposite connection? Imagine HttpServerFilter wants to send data back to
      the client, so it constructs HttpPacket and send it by the custom protocol FilterChain.
      HttpFilter intercepts the HttpPacket, decodes it into a Buffer and... there is no Filter in
      the custom protocol FilterChain to pass the Buffer to, so it never comes to TransportFilter
      and never gets sent! In order to fix that, we need to add utility back channel Filter as the
      first Filter in the protocol FilterChain, which will be reponsible for redirecting custom
      protocol FilterChain processing back to the main FilterChain. So finally complete picture will
      look like:</para>
    <para><inlinemediaobject>
      <imageobject>
        <imagedata fileref="../images/portunification/portunification-diagram2.svg"></imagedata>
      </imageobject>
    </inlinemediaobject></para>
    <para>The PUFilter logic could be described using follwoing flowchart diagram:</para>
    <para><inlinemediaobject>
      <imageobject>
        <imagedata scale="70" fileref="../images/portunification/pufilter-flowchart.svg"></imagedata>
      </imageobject>
    </inlinemediaobject></para>
  </section>
  <section>
    <title>Sample</title>
    <para>Assume we have two services: add and sub, which are responsible for adding and subtracting
      passed integer values. The services protocol could be descibed by the following ABNF:<itemizedlist>
        <listitem>
          <para><emphasis role="bold"
            >add</emphasis><programlisting>protocol  =  magic
             value1
             value2
magic     =  "add"
value1    =  INT
value2    =  INT
INT       =  4*BYTE
BYTE      =  OCTET</programlisting></para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para><emphasis role="bold"
            >sub</emphasis><programlisting>protocol  =  magic
             value1
             value2
magic     =  "sub"
value1    =  INT
value2    =  INT
INT       =  4*BYTE
BYTE      =  OCTET</programlisting></para>
        </listitem>
      </itemizedlist></para>
    <para>From the protocol description, it's obvious we can distinguish two services and their
      protocols by 3-bytes magic header, add-service has "add", sub-service "sub". So it's what
      service's ProtocolFinder should address. For example add-service ProtocolFinder may look
      like:<programlisting>/**
 * {@link ProtocolFinder}, responsible to determine if incoming byte buffer
 * represents ADD-service request.
 */
public class AddProtocolFinder implements ProtocolFinder {

    private final static byte[] magic = {'a', 'd', 'd'};

    /**
     * {@inheritDoc}
     */
    @Override
    public Result find(final PUContext puContext, final FilterChainContext ctx) {
        // Get the input Buffer
        final Buffer inputBuffer = ctx.getMessage();

        final int bytesToCompare = Math.min(magic.length, inputBuffer.remaining());
        
        final int bufferStart = inputBuffer.position();

        // Compare incoming bytes with ADD-service protocol magic
        for (int i = 0; i &lt; bytesToCompare; i++) {
            if (magic[i] != inputBuffer.get(bufferStart + i)) {
                // If at least one byte doesn't match - it's not ADD-service protocol
                return Result.NOT_FOUND;
            }
        }

        // if we check entire magic - return FOUND, or NEED_MORE_DATA otherwise
        return bytesToCompare == magic.length ?
            Result.FOUND : Result.NEED_MORE_DATA;
    }

}</programlisting></para>
    <para>The add-service FilterChain will contain two Filters:<itemizedlist>
        <listitem>
          <para><emphasis role="bold">AddServerMessageFilter</emphasis>, responsible for
            parsing/serializing add-service messages</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">AddServiceFilter</emphasis> the actual service
            implementation</para>
        </listitem>
      </itemizedlist></para>
    <para>The PUProtocol initialization and registration for add-service will look following
      way:<programlisting>        // Create PUFilter
        final PUFilter puFilter = new PUFilter();

        // Create ADD-service ProtocolFinder
        final ProtocolFinder addProtocolFinder = new AddProtocolFinder();

        // Create ADD-service FilterChain
        final FilterChain addProtocolFilterChain =
                puFilter.getPUFilterChainBuilder()
                // Add ADD-service message parser/serializer
                .add(new AddServerMessageFilter())
                // Add ADD-service filter
                .add(new AddServiceFilter())
                .build();

        // Construct PUProtocol
        final PUFilter addServicePUProtocol = new PUProtocol(addProtocolFinder, addProtocolFilterChain);

        // Register add-service pu protocol
        puFilter.register(addServicePUProtocol);</programlisting></para>
    <para>Similar coding is required for the sub-service. Finally port unification Filter (PUFilter)
      should be added to the main FilterChain and Transport could be
      started<programlisting>        // Construct the main filter chain
        final FilterChainBuilder puFilterChainBuilder = FilterChainBuilder.stateless()
                .add(new TransportFilter())
                .add(puFilter);

        // Build TCP transport
        final TCPNIOTransport transport = TCPNIOTransportBuilder.newInstance().build();
        transport.setProcessor(puFilterChainBuilder.build());

        // Bind to the server port
        transport.bind(PORT);
        // Start
        transport.start();</programlisting></para>
    <para>Complete sample code could be found <link
        xlink:href="http://java.net/projects/grizzly/sources/svn/show/branches/2dot0/code/samples/portunif/src/main/java/org/glassfish/grizzly/samples/portunif"
        >here</link>.</para>
  </section>
</chapter>
